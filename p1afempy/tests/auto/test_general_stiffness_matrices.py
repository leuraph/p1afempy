import numpy as np
import unittest
from p1afempy.data_structures import ElementsType, CoordinatesType
from p1afempy.refinement import refineNVB
import random


class GeneralStiffnessMatrixTest(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        random.seed(42)

    @classmethod
    def tearDownClass(cls):
        pass

    def test_identity(self) -> None:
        max_n_vertices = 100

        elements, coordinates = get_small_mesh(
            max_n_vertices=max_n_vertices)


def get_small_mesh(max_n_vertices: int = 100) -> tuple[
        ElementsType, CoordinatesType]:
    """
    returns a relatively coarse mesh

    notes
    -----
    the mesh is generated by a non-homogenoues
    NVB mesh refinement

    returns
    -------
    elements: ElementsType
    coordinates: CoordinatesType
    """
    coordinates = np.array([
        [0., 0.],
        [1., 0.],
        [1., 1.],
        [0., 1.]
    ])

    elements = np.array([
        [0, 1, 2],
        [0, 2, 3]
    ])

    boundary = np.array([
        [0, 1],
        [1, 2],
        [2, 3],
        [3, 0]
    ])
    boundaries = [boundary]
    while True:
        # randomly mark 10% of elements for refinement in each step
        fraction_of_elements_to_refine = 0.1
        n_elements = elements.shape[0]
        # at least mark one element for refinement
        n_elements_to_refine = max(
            [int(n_elements*fraction_of_elements_to_refine), 1])
        marked = random.sample(
            list(np.arange(n_elements)), k=n_elements_to_refine)

        tmp_coordinates, tmp_elements, tmp_boundaries, _ = refineNVB(
            coordinates=coordinates,
            elements=elements,
            marked_elements=marked,
            boundary_conditions=boundaries)

        n_vertices = tmp_coordinates.shape[0]
        max_n_vertices_exceeded = n_vertices > max_n_vertices
        if max_n_vertices_exceeded:
            return elements, coordinates

        coordinates = tmp_coordinates
        elements = tmp_elements
        boundaries = tmp_boundaries


if __name__ == '__main__':
    unittest.main()
